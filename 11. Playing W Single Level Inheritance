// SPDX-License-Identifier: UNLICENSED 
pragma solidity >=0.4.22 <0.6.0;

contract A {
	// Declaring state variables
	string a = "Solidity " ;
	string b = "Is ";
  string x;
	// Defining external function to return concatenated string
	function getA() public{
		x = string(abi.encodePacked(a,b));
	}
}

// Defining child contract B inheriting parent contract A
contract B is A {
	// Declaring state variables of child contract B
    string c = "Awsome";
    string public result;
	// Defining external function to return concatenated string
	function getB() public returns(string memory){
		result = string(abi.encodePacked(x,c));
    return result;
	}
}

// In Remix it is up to us to deploy whichever contract that exists in our solidity file.
// But after deployment of a contract that has inherited (child) from some other contract (parent), we have access to:
// 1. all the <public> functions of the parent contract.
// 2. all the <external> functions of the parent contract 
// 3. all the <public> state variables of the parent contract.
// 4. all the <internal> state variables of the parent contract.
// Note: External functions are just like public functions. The only difference is that they can't be used within their own contract without using <this>.
// Note: State variables can not be declared <external>.
// Note: We don't have access to <private> state variables and functions of the parent contract.   

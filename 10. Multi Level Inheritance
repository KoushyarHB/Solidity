// SPDX-License-Identifier: UNLICENSED 
pragma solidity >=0.4.22 <0.6.0;

contract A {
	// Declaring state variables
	string internal x;
	string a = "Solidity " ;
	string b = "Is ";
	// Defining external function to return concatenated string
	function getA() external{
		x = string(abi.encodePacked(a, b));
	}
}

// Defining child contract B inheriting parent contract A
contract B is A {
	// Declaring state variables of child contract B
	string public y;
	string c = "Awsome";
	// Defining external function to return concatenated string
	function getB() external payable returns(string memory){
		y = string(abi.encodePacked(x, c));
	}
    //string public result1 = testInheritance();
}

// Defining child contract C inheriting parent contract B
contract C is B {
	// Defining external function returning concatenated string generated in child contract B
	function getC() external view returns(string memory){
		return y;
	}

}

// Defining calling contract
contract caller {
	// Creating object of child C
	C cc = new C();
	// Defining public function to return final concatenated string
	function testInheritance() public returns (string memory) {
		cc.getA();
		cc.getB();
		return cc.getC();
	}
    string public result = testInheritance();
}

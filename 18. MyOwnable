pragma solidity >=0.5.0 <0.6.0;

contract MyOwnable {

    address private _owner;

    event OwnershipTransferred(address previousOwner, address newOwner);

    constructor() internal {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0),_owner);
    } 

    function OwnerOf() public view returns(address){
        return _owner;
    }

    modifier onlyOwner(){
        require(isOwner());
        _;
    }

    function isOwner() public view returns(bool){
        return msg.sender == _owner;
    }

    function renounceOwnership() public onlyOwner{
        _owner = address(0);
        emit OwnershipTransferred(_owner,address(0));
    }

    function transferOwnership(address _newOwner) public onlyOwner{
        _transferOwnership(_newOwner);
    }

    function _transferOwnership(address _newOwner) internal{
        require(_newOwner != address(0));
        _owner = _newOwner;
        emit OwnershipTransferred(_owner,_newOwner);
    }

}
